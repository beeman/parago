// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`application generator should snapshot the generated structure 1`] = `
"{
  "tsconfig.json": {
    "path": "anchor/tsconfig.json",
    "content": "{\\n  \\"extends\\": \\"../tsconfig.base.json\\",\\n  \\"compilerOptions\\": {\\n    \\"module\\": \\"commonjs\\"\\n  },\\n  \\"files\\": [],\\n  \\"include\\": [],\\n  \\"references\\": [\\n    {\\n      \\"path\\": \\"./tsconfig.lib.json\\"\\n    },\\n    {\\n      \\"path\\": \\"./tsconfig.spec.json\\"\\n    }\\n  ]\\n}\\n"
  },
  "README.md": {
    "path": "anchor/README.md",
    "content": "# anchor\\n\\nThis library was generated with [Nx](https://nx.dev).\\n\\n## Building\\n\\nRun \`nx build anchor\` to build the library.\\n\\n## Running unit tests\\n\\nRun \`nx test anchor\` to execute the unit tests via [Jest](https://jestjs.io).\\n"
  },
  "src": {
    "path": "anchor/src",
    "children": {
      "index.ts": {
        "path": "anchor/src/index.ts",
        "content": "export * from './output/my_test_program';\\n"
      },
      "output": {
        "path": "anchor/src/output",
        "children": {
          "my_test_program.ts": {
            "path": "anchor/src/output/my_test_program.ts",
            "content": "export type MyTestProgram = {\\n  version: '0.1.0';\\n  name: 'my_test_program';\\n  instructions: [\\n    {\\n      name: 'initialize';\\n      accounts: [];\\n      args: [];\\n    }\\n  ];\\n};\\n\\nexport const IDL: MyTestProgram = {\\n  version: '0.1.0',\\n  name: 'my_test_program',\\n  instructions: [\\n    {\\n      name: 'initialize',\\n      accounts: [],\\n      args: [],\\n    },\\n  ],\\n};\\n"
          }
        }
      },
      "tests": {
        "path": "anchor/src/tests",
        "children": {
          "my-test-program.spec.ts": {
            "path": "anchor/src/tests/my-test-program.spec.ts",
            "content": "import * as anchor from '@coral-xyz/anchor';\\nimport { Program } from '@coral-xyz/anchor';\\nimport { MyTestProgram } from '../../target/types/my_test_program';\\n\\ndescribe('my-test-program', () => {\\n  // Configure the client to use the local cluster.\\n  anchor.setProvider(anchor.AnchorProvider.env());\\n\\n  const program = anchor.workspace.MyTestProgram as Program<MyTestProgram>;\\n\\n  it('Is initialized!', async () => {\\n    // Add your test here.\\n    const tx = await program.methods.initialize().rpc();\\n    console.log('Your transaction signature', tx);\\n  });\\n});\\n"
          }
        }
      }
    }
  },
  "tsconfig.lib.json": {
    "path": "anchor/tsconfig.lib.json",
    "content": "{\\n  \\"extends\\": \\"./tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"outDir\\": \\"../dist/out-tsc\\",\\n    \\"declaration\\": true,\\n    \\"types\\": [\\"node\\"]\\n  },\\n  \\"include\\": [\\"src/**/*.ts\\"],\\n  \\"exclude\\": [\\"jest.config.ts\\", \\"src/**/*.spec.ts\\", \\"src/**/*.test.ts\\"]\\n}\\n"
  },
  ".swcrc": {
    "path": "anchor/.swcrc",
    "content": "{\\n  \\"jsc\\": {\\n    \\"target\\": \\"es2017\\",\\n    \\"parser\\": {\\n      \\"syntax\\": \\"typescript\\",\\n      \\"decorators\\": true,\\n      \\"dynamicImport\\": true\\n    },\\n    \\"transform\\": {\\n      \\"decoratorMetadata\\": true,\\n      \\"legacyDecorator\\": true\\n    },\\n    \\"keepClassNames\\": true,\\n    \\"externalHelpers\\": true,\\n    \\"loose\\": true\\n  },\\n  \\"module\\": {\\n    \\"type\\": \\"es6\\"\\n  },\\n  \\"sourceMaps\\": true,\\n  \\"exclude\\": [\\n    \\"jest.config.ts\\",\\n    \\".*\\\\\\\\.spec.tsx?$\\",\\n    \\".*\\\\\\\\.test.tsx?$\\",\\n    \\"./src/jest-setup.ts$\\",\\n    \\"./**/jest-setup.ts$\\",\\n    \\".*.js$\\"\\n  ]\\n}\\n"
  },
  "package.json": {
    "path": "anchor/package.json",
    "content": "{\\n  \\"name\\": \\"@proj/anchor\\",\\n  \\"version\\": \\"0.0.1\\",\\n  \\"dependencies\\": {},\\n  \\"type\\": \\"commonjs\\",\\n  \\"main\\": \\"./index.cjs\\",\\n  \\"module\\": \\"./index.js\\"\\n}\\n"
  },
  "project.json": {
    "path": "anchor/project.json",
    "content": "{\\n  \\"name\\": \\"anchor\\",\\n  \\"$schema\\": \\"../node_modules/nx/schemas/project-schema.json\\",\\n  \\"sourceRoot\\": \\"anchor/src\\",\\n  \\"projectType\\": \\"library\\",\\n  \\"targets\\": {\\n    \\"build\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor\\",\\n        \\"commands\\": [\\"anchor build\\", \\"cp -rv target/types/* src/output\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"lint\\": {\\n      \\"executor\\": \\"@nx/linter:eslint\\",\\n      \\"outputs\\": [\\"{options.outputFile}\\"],\\n      \\"options\\": {\\n        \\"lintFilePatterns\\": [\\"anchor/**/*.ts\\", \\"anchor/package.json\\"]\\n      }\\n    },\\n    \\"test\\": {\\n      \\"executor\\": \\"@nx/jest:jest\\",\\n      \\"outputs\\": [\\"{workspaceRoot}/coverage/{projectRoot}\\"],\\n      \\"options\\": {\\n        \\"jestConfig\\": \\"anchor/jest.config.ts\\",\\n        \\"passWithNoTests\\": true\\n      },\\n      \\"configurations\\": {\\n        \\"ci\\": {\\n          \\"ci\\": true,\\n          \\"codeCoverage\\": true\\n        }\\n      }\\n    },\\n    \\"clean\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor\\",\\n        \\"commands\\": [\\"anchor clean\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"deploy\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor\\",\\n        \\"commands\\": [\\"anchor deploy\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"localnet\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor\\",\\n        \\"commands\\": [\\"anchor localnet\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"publish\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor\\",\\n        \\"commands\\": [\\"anchor publish\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"anchor-test\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor\\",\\n        \\"commands\\": [\\"anchor test\\"],\\n        \\"parallel\\": false\\n      }\\n    }\\n  },\\n  \\"tags\\": []\\n}\\n"
  },
  ".eslintrc.json": {
    "path": "anchor/.eslintrc.json",
    "content": "{\\n  \\"extends\\": [\\"../.eslintrc.json\\"],\\n  \\"ignorePatterns\\": [\\"!**/*\\"],\\n  \\"overrides\\": [\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\", \\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.json\\"],\\n      \\"parser\\": \\"jsonc-eslint-parser\\",\\n      \\"rules\\": {\\n        \\"@nx/dependency-checks\\": [\\n          \\"error\\",\\n          {\\n            \\"ignoredFiles\\": [\\"{projectRoot}/rollup.config.{js,ts,mjs,mts}\\"]\\n          }\\n        ]\\n      }\\n    }\\n  ]\\n}\\n"
  },
  "jest.config.ts": {
    "path": "anchor/jest.config.ts",
    "content": "/* eslint-disable */\\nimport { readFileSync } from 'fs';\\n\\n// Reading the SWC compilation config and remove the \\"exclude\\"\\n// for the test files to be compiled by SWC\\nconst { exclude: _, ...swcJestConfig } = JSON.parse(\\n  readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')\\n);\\n\\n// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.\\n// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to \\"exclude\\"\\nif (swcJestConfig.swcrc === undefined) {\\n  swcJestConfig.swcrc = false;\\n}\\n\\n// Uncomment if using global setup/teardown files being transformed via swc\\n// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries\\n// jest needs EsModule Interop to find the default exported setup/teardown functions\\n// swcJestConfig.module.noInterop = false;\\n\\nexport default {\\n  displayName: 'anchor',\\n  preset: '../jest.preset.js',\\n  transform: {\\n    '^.+\\\\\\\\.[tj]s$': ['@swc/jest', swcJestConfig],\\n  },\\n  moduleFileExtensions: ['ts', 'js', 'html'],\\n  testEnvironment: '',\\n  coverageDirectory: '../coverage/anchor',\\n};\\n"
  },
  "tsconfig.spec.json": {
    "path": "anchor/tsconfig.spec.json",
    "content": "{\\n  \\"extends\\": \\"./tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"outDir\\": \\"../dist/out-tsc\\",\\n    \\"module\\": \\"commonjs\\",\\n    \\"types\\": [\\"jest\\", \\"node\\"]\\n  },\\n  \\"include\\": [\\n    \\"jest.config.ts\\",\\n    \\"src/**/*.test.ts\\",\\n    \\"src/**/*.spec.ts\\",\\n    \\"src/**/*.d.ts\\"\\n  ]\\n}\\n"
  },
  "Anchor.toml": {
    "path": "anchor/Anchor.toml",
    "content": "[features]\\nseeds = false\\nskip-lint = false\\n[programs.localnet]\\nmy_test_program = \\"EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8\\"\\n\\n[registry]\\nurl = \\"https://api.apr.dev\\"\\n\\n[provider]\\ncluster = \\"Localnet\\"\\nwallet = \\"~/.config/solana/id.json\\"\\n\\n[scripts]\\ntest = \\"../node_modules/.bin/nx run anchor:test\\"\\n"
  },
  "Cargo.toml": {
    "path": "anchor/Cargo.toml",
    "content": "[workspace]\\nmembers = [\\n    \\"programs/*\\"\\n]\\nresolver = \\"2\\"\\n\\n[profile.release]\\noverflow-checks = true\\nlto = \\"fat\\"\\ncodegen-units = 1\\n[profile.release.build-override]\\nopt-level = 3\\nincremental = false\\ncodegen-units = 1\\n"
  },
  "migrations": {
    "path": "anchor/migrations",
    "children": {
      "deploy.ts": {
        "path": "anchor/migrations/deploy.ts",
        "content": "// Migrations are an early feature. Currently, they're nothing more than this\\n// single deploy script that's invoked from the CLI, injecting a provider\\n// configured from the workspace's Anchor.toml.\\n\\nconst anchor = require('@coral-xyz/anchor');\\n\\nmodule.exports = async function (provider) {\\n  // Configure client to use the provider.\\n  anchor.setProvider(provider);\\n\\n  // Add your deploy script here.\\n};\\n"
      }
    }
  },
  "programs": {
    "path": "anchor/programs",
    "children": {
      "my-test-program": {
        "path": "anchor/programs/my-test-program",
        "children": {
          "Cargo.toml": {
            "path": "anchor/programs/my-test-program/Cargo.toml",
            "content": "[package]\\nname = \\"my-test-program\\"\\nversion = \\"0.1.0\\"\\ndescription = \\"Created with Anchor\\"\\nedition = \\"2021\\"\\n\\n[lib]\\ncrate-type = [\\"cdylib\\", \\"lib\\"]\\nname = \\"my_test_program\\"\\n\\n[features]\\nno-entrypoint = []\\nno-idl = []\\nno-log-ix-name = []\\ncpi = [\\"no-entrypoint\\"]\\ndefault = []\\n\\n[dependencies]\\nanchor-lang = \\"0.28.0\\"\\n"
          },
          "Xargo.toml": {
            "path": "anchor/programs/my-test-program/Xargo.toml",
            "content": "[target.bpfel-unknown-unknown.dependencies.std]\\nfeatures = []\\n"
          },
          "src": {
            "path": "anchor/programs/my-test-program/src",
            "children": {
              "lib.rs": {
                "path": "anchor/programs/my-test-program/src/lib.rs",
                "content": "use anchor_lang::prelude::*;\\n\\ndeclare_id!(\\"EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8\\");\\n\\n#[program]\\npub mod my_test_program {\\n    use super::*;\\n\\n    pub fn initialize(_ctx: Context<Initialize>) -> Result<()> {\\n        Ok(())\\n    }\\n}\\n\\n#[derive(Accounts)]\\npub struct Initialize {}\\n"
              }
            }
          }
        }
      }
    }
  }
}"
`;
