// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`application generator should snapshot the generated structure 1`] = `
"{
  "src": {
    "path": "test/src",
    "children": {
      "app": {
        "path": "test/src/app",
        "children": {
          "app.tsx": {
            "path": "test/src/app/app.tsx",
            "isBinary": false,
            "content": "import { AppLayout } from './app-layout';\\nimport { AppRoutes } from './app-routes';\\nimport { SolanaProvider } from './solana-provider';\\n\\nexport function App() {\\n  return (\\n    <SolanaProvider>\\n      <AppLayout>\\n        <AppRoutes />\\n      </AppLayout>\\n    </SolanaProvider>\\n  );\\n}\\n"
          },
          "app-layout.tsx": {
            "path": "test/src/app/app-layout.tsx",
            "isBinary": false,
            "content": "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\\nimport { ReactNode } from 'react';\\nimport { Link, useLocation } from 'react-router-dom';\\n\\nexport function AppLayout({ children }: { children: ReactNode }) {\\n  const { pathname } = useLocation();\\n  const pages = [\\n    { label: 'Airdrop', path: '/airdrop' },\\n    { label: 'Page 1', path: '/page-1' },\\n    { label: 'Page 2', path: '/page-2' },\\n  ];\\n\\n  return (\\n    <div className=\\"h-full flex flex-col\\">\\n      <div className=\\"navbar bg-base-300 text-neutral-content\\">\\n        <div className=\\"flex-1\\">\\n          <Link to=\\"/\\" className=\\"btn btn-ghost normal-case text-xl\\">\\n            @parago/starter-react\\n          </Link>\\n          <ul className=\\"menu menu-horizontal px-1\\">\\n            {pages.map(({ label, path }) => (\\n              <li key={path}>\\n                <Link\\n                  className={pathname.startsWith(path) ? 'active' : ''}\\n                  to={path}\\n                >\\n                  {label}\\n                </Link>\\n              </li>\\n            ))}\\n          </ul>\\n        </div>\\n        <div className=\\"flex-none\\">\\n          <WalletMultiButton />\\n        </div>\\n      </div>\\n      <div className=\\"flex-grow\\">{children}</div>\\n      <footer className=\\"footer footer-center p-4 bg-base-300 text-base-content\\">\\n        <aside>\\n          <p>Generated with @parago/starter-react@0.0.1</p>\\n        </aside>\\n      </footer>\\n    </div>\\n  );\\n}\\n"
          },
          "app-routes.tsx": {
            "path": "test/src/app/app-routes.tsx",
            "isBinary": false,
            "content": "import { IDL } from '@proj/anchor';\\nimport { useRoutes } from 'react-router-dom';\\nimport { Airdrop } from './pages/airdrop';\\nimport { Page1 } from './pages/page-1';\\nimport { Page2 } from './pages/page-2';\\n\\nexport function AppRoutes() {\\n  return useRoutes([\\n    {\\n      index: true,\\n      path: '/',\\n      element: <pre>{JSON.stringify(IDL, null, 2)}</pre>,\\n    },\\n    { path: '/airdrop', element: <Airdrop /> },\\n    { path: '/page-1', element: <Page1 /> },\\n    { path: '/page-2', element: <Page2 /> },\\n  ]);\\n}\\n"
          },
          "pages": {
            "path": "test/src/app/pages",
            "children": {
              "airdrop.tsx": {
                "path": "test/src/app/pages/airdrop.tsx",
                "isBinary": false,
                "content": "import { useConnection, useWallet } from '@solana/wallet-adapter-react';\\nimport { useCallback } from 'react';\\nimport { TransactionSignature, LAMPORTS_PER_SOL } from '@solana/web3.js';\\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\\nexport function Airdrop() {\\n  const { connection } = useConnection();\\n  const { publicKey } = useWallet();\\n\\n  const request = useCallback(async () => {\\n    if (!publicKey) {\\n      console.log('error', 'Wallet not connected!');\\n      console.log({\\n        type: 'error',\\n        message: 'error',\\n        description: 'Wallet not connected!',\\n      });\\n      return;\\n    }\\n\\n    let signature: TransactionSignature = '';\\n\\n    try {\\n      signature = await connection.requestAirdrop(publicKey, LAMPORTS_PER_SOL);\\n\\n      // Get the lates block hash to use on our transaction and confirmation\\n      const latestBlockhash = await connection.getLatestBlockhash();\\n      await connection.confirmTransaction(\\n        { signature, ...latestBlockhash },\\n        'confirmed'\\n      );\\n\\n      console.log({\\n        type: 'success',\\n        message: 'Airdrop successful!',\\n        txid: signature,\\n      });\\n\\n      // getUserSOLBalance(publicKey, connection);\\n    } catch (error: any) {\\n      console.log({\\n        type: 'error',\\n        message: \`Airdrop failed!\`,\\n        description: error?.message,\\n        txid: signature,\\n      });\\n      console.log(error);\\n      console.log('error', \`Airdrop failed! \${error?.message}\`, signature);\\n    }\\n  }, [publicKey, connection]);\\n\\n  return (\\n    <div className=\\"hero py-[100px]\\">\\n      <div className=\\"hero-content text-center\\">\\n        <div className=\\"max-w-md\\">\\n          <h1 className=\\"text-5xl font-bold\\">Airdrop</h1>\\n          <p className=\\"py-6\\">\\n            You can request an airdrop of 1 SOL to your wallet address.\\n          </p>\\n          {publicKey ? (\\n            <button onClick={request} className=\\"btn btn-primary\\">\\n              Request Airdrop\\n            </button>\\n          ) : (\\n            <WalletMultiButton />\\n          )}\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n"
              },
              "page-1.tsx": {
                "path": "test/src/app/pages/page-1.tsx",
                "isBinary": false,
                "content": "export function Page1() {\\n  return (\\n    <div>\\n      <h1>Page 1</h1>\\n      <p>\\n        This is the generated <code>page-1.tsx</code> component.\\n      </p>\\n    </div>\\n  );\\n}\\n"
              },
              "page-2.tsx": {
                "path": "test/src/app/pages/page-2.tsx",
                "isBinary": false,
                "content": "export function Page2() {\\n  return (\\n    <div>\\n      <h1>Page 2</h1>\\n      <p>\\n        This is the generated <code>page-2.tsx</code> component.\\n      </p>\\n    </div>\\n  );\\n}\\n"
              }
            }
          },
          "solana-provider.tsx": {
            "path": "test/src/app/solana-provider.tsx",
            "isBinary": false,
            "content": "import { WalletError } from '@solana/wallet-adapter-base';\\nimport {\\n  ConnectionProvider,\\n  WalletProvider,\\n} from '@solana/wallet-adapter-react';\\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\\nimport { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';\\nimport { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';\\nimport { Cluster, clusterApiUrl } from '@solana/web3.js';\\nimport {\\n  createContext,\\n  ReactNode,\\n  useCallback,\\n  useContext,\\n  useMemo,\\n  useState,\\n} from 'react';\\n\\nrequire('@solana/wallet-adapter-react-ui/styles.css');\\n\\nexport interface SolanaProviderContext {\\n  cluster: Cluster;\\n  endpoint: string;\\n  setCluster?: (cluster: Cluster) => void;\\n}\\n\\nconst Context = createContext<SolanaProviderContext>(\\n  {} as SolanaProviderContext\\n);\\n\\nexport function SolanaProvider({ children }: { children: ReactNode }) {\\n  const [cluster, setCluster] = useState<Cluster>('devnet');\\n  const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);\\n  const wallets = useMemo(\\n    () => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],\\n    [cluster]\\n  );\\n\\n  const onError = useCallback((error: WalletError) => {\\n    console.error(error);\\n  }, []);\\n\\n  const value: SolanaProviderContext = {\\n    cluster,\\n    endpoint,\\n    setCluster,\\n  };\\n  return (\\n    <ConnectionProvider endpoint={endpoint}>\\n      <WalletProvider wallets={wallets} onError={onError} autoConnect={true}>\\n        <WalletModalProvider>\\n          <Context.Provider value={value}>{children}</Context.Provider>\\n        </WalletModalProvider>\\n      </WalletProvider>\\n    </ConnectionProvider>\\n  );\\n}\\n\\nexport function useSolana() {\\n  return useContext(Context);\\n}\\n"
          }
        }
      },
      "assets": {
        "path": "test/src/assets",
        "children": {
          ".gitkeep": {
            "path": "test/src/assets/.gitkeep",
            "isBinary": false,
            "content": ""
          }
        }
      },
      "environments": {
        "path": "test/src/environments",
        "children": {
          "environment.prod.ts": {
            "path": "test/src/environments/environment.prod.ts",
            "isBinary": false,
            "content": "export const environment = {\\n  production: true,\\n};\\n"
          },
          "environment.ts": {
            "path": "test/src/environments/environment.ts",
            "isBinary": false,
            "content": "// This file can be replaced during build by using the \`fileReplacements\` array.\\n// When building for production, this file is replaced with \`environment.prod.ts\`.\\n\\nexport const environment = {\\n  production: false,\\n};\\n"
          }
        }
      },
      "favicon.ico": {
        "path": "test/src/favicon.ico",
        "isBinary": true,
        "content": "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"
      },
      "index.html": {
        "path": "test/src/index.html",
        "isBinary": false,
        "content": "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\" />\\n    <title>@parago/starter-react</title>\\n    <base href=\\"/\\" />\\n    <meta\\n      name=\\"viewport\\"\\n      content=\\"width=device-width, initial-scale=1, maximum-scale=1\\"\\n    />\\n    <link rel=\\"icon\\" type=\\"image/x-icon\\" href=\\"favicon.ico\\" />\\n  </head>\\n  <body>\\n    <div id=\\"root\\"></div>\\n  </body>\\n</html>\\n"
      },
      "main.tsx": {
        "path": "test/src/main.tsx",
        "isBinary": false,
        "content": "import { StrictMode } from 'react';\\nimport * as ReactDOM from 'react-dom/client';\\nimport { BrowserRouter } from 'react-router-dom';\\n\\nimport { App } from './app/app';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\nroot.render(\\n  <StrictMode>\\n    <BrowserRouter>\\n      <App />\\n    </BrowserRouter>\\n  </StrictMode>\\n);\\n"
      },
      "styles.css": {
        "path": "test/src/styles.css",
        "isBinary": false,
        "content": "@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\nhtml,\\nbody,\\n#root {\\n  height: 100%;\\n}\\n"
      }
    }
  },
  "tsconfig.app.json": {
    "path": "test/tsconfig.app.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": \\"./tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"outDir\\": \\"../dist/out-tsc\\",\\n    \\"types\\": [\\n      \\"node\\",\\n\\n      \\"@nx/react/typings/cssmodule.d.ts\\",\\n      \\"@nx/react/typings/image.d.ts\\"\\n    ]\\n  },\\n  \\"exclude\\": [\\n    \\"jest.config.ts\\",\\n    \\"src/**/*.spec.ts\\",\\n    \\"src/**/*.test.ts\\",\\n    \\"src/**/*.spec.tsx\\",\\n    \\"src/**/*.test.tsx\\",\\n    \\"src/**/*.spec.js\\",\\n    \\"src/**/*.test.js\\",\\n    \\"src/**/*.spec.jsx\\",\\n    \\"src/**/*.test.jsx\\"\\n  ],\\n  \\"include\\": [\\"src/**/*.js\\", \\"src/**/*.jsx\\", \\"src/**/*.ts\\", \\"src/**/*.tsx\\"]\\n}\\n"
  },
  "webpack.config.js": {
    "path": "test/webpack.config.js",
    "isBinary": false,
    "content": "const { composePlugins, withNx } = require('@nx/webpack');\\nconst { withReact } = require('@nx/react');\\n\\n// Nx plugins for webpack.\\nmodule.exports = composePlugins(withNx(), withReact(), (config) => {\\n  // Update the webpack config as needed here.\\n  // e.g. \`config.plugins.push(new MyPlugin())\`\\n  config.ignoreWarnings = [/Failed to parse source map/];\\n\\n  return config;\\n});\\n"
  },
  ".babelrc": {
    "path": "test/.babelrc",
    "isBinary": false,
    "content": "{\\n  \\"presets\\": [\\n    [\\n      \\"@nx/react/babel\\",\\n      {\\n        \\"runtime\\": \\"automatic\\"\\n      }\\n    ]\\n  ],\\n  \\"plugins\\": []\\n}\\n"
  },
  "tsconfig.json": {
    "path": "test/tsconfig.json",
    "isBinary": false,
    "content": "{\\n  \\"compilerOptions\\": {\\n    \\"jsx\\": \\"react-jsx\\",\\n    \\"allowJs\\": false,\\n    \\"esModuleInterop\\": false,\\n    \\"allowSyntheticDefaultImports\\": true,\\n    \\"strict\\": true\\n  },\\n  \\"files\\": [],\\n  \\"include\\": [],\\n  \\"references\\": [\\n    {\\n      \\"path\\": \\"./tsconfig.app.json\\"\\n    }\\n  ],\\n  \\"extends\\": \\"../tsconfig.base.json\\"\\n}\\n"
  },
  "project.json": {
    "path": "test/project.json",
    "isBinary": false,
    "content": "{\\n  \\"name\\": \\"test\\",\\n  \\"$schema\\": \\"../node_modules/nx/schemas/project-schema.json\\",\\n  \\"sourceRoot\\": \\"test/src\\",\\n  \\"projectType\\": \\"application\\",\\n  \\"targets\\": {\\n    \\"build\\": {\\n      \\"executor\\": \\"@nx/webpack:webpack\\",\\n      \\"outputs\\": [\\"{options.outputPath}\\"],\\n      \\"defaultConfiguration\\": \\"production\\",\\n      \\"options\\": {\\n        \\"compiler\\": \\"babel\\",\\n        \\"outputPath\\": \\"dist/test\\",\\n        \\"index\\": \\"test/src/index.html\\",\\n        \\"baseHref\\": \\"/\\",\\n        \\"main\\": \\"test/src/main.tsx\\",\\n        \\"tsConfig\\": \\"test/tsconfig.app.json\\",\\n        \\"assets\\": [\\"test/src/favicon.ico\\", \\"test/src/assets\\"],\\n        \\"styles\\": [\\"test/src/styles.css\\"],\\n        \\"scripts\\": [],\\n        \\"isolatedConfig\\": true,\\n        \\"webpackConfig\\": \\"test/webpack.config.js\\",\\n        \\"postcssConfig\\": \\"test/postcss.config.js\\"\\n      },\\n      \\"configurations\\": {\\n        \\"development\\": {\\n          \\"extractLicenses\\": false,\\n          \\"optimization\\": false,\\n          \\"sourceMap\\": true,\\n          \\"vendorChunk\\": true\\n        },\\n        \\"production\\": {\\n          \\"fileReplacements\\": [\\n            {\\n              \\"replace\\": \\"test/src/environments/environment.ts\\",\\n              \\"with\\": \\"test/src/environments/environment.prod.ts\\"\\n            }\\n          ],\\n          \\"optimization\\": true,\\n          \\"outputHashing\\": \\"all\\",\\n          \\"sourceMap\\": false,\\n          \\"namedChunks\\": false,\\n          \\"extractLicenses\\": true,\\n          \\"vendorChunk\\": false\\n        }\\n      }\\n    },\\n    \\"serve\\": {\\n      \\"executor\\": \\"@nx/webpack:dev-server\\",\\n      \\"defaultConfiguration\\": \\"development\\",\\n      \\"options\\": {\\n        \\"buildTarget\\": \\"test:build\\",\\n        \\"hmr\\": true\\n      },\\n      \\"configurations\\": {\\n        \\"development\\": {\\n          \\"buildTarget\\": \\"test:build:development\\"\\n        },\\n        \\"production\\": {\\n          \\"buildTarget\\": \\"test:build:production\\",\\n          \\"hmr\\": false\\n        }\\n      }\\n    },\\n    \\"lint\\": {\\n      \\"executor\\": \\"@nx/linter:eslint\\",\\n      \\"outputs\\": [\\"{options.outputFile}\\"],\\n      \\"options\\": {\\n        \\"lintFilePatterns\\": [\\"test/**/*.{ts,tsx,js,jsx}\\"]\\n      }\\n    }\\n  },\\n  \\"tags\\": []\\n}\\n"
  },
  ".eslintrc.json": {
    "path": "test/.eslintrc.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": [\\"plugin:@nx/react\\", \\"../.eslintrc.json\\"],\\n  \\"ignorePatterns\\": [\\"!**/*\\"],\\n  \\"overrides\\": [\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\", \\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    }\\n  ]\\n}\\n"
  },
  "postcss.config.js": {
    "path": "test/postcss.config.js",
    "isBinary": false,
    "content": "const { join } = require('path');\\n\\n// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the \`postcssConfig\` build\\n// option from your application's configuration (i.e. project.json).\\n//\\n// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries\\n\\nmodule.exports = {\\n  plugins: {\\n    tailwindcss: {\\n      config: join(__dirname, 'tailwind.config.js'),\\n    },\\n    autoprefixer: {},\\n  },\\n};\\n"
  },
  "tailwind.config.js": {
    "path": "test/tailwind.config.js",
    "isBinary": false,
    "content": "const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');\\nconst { join } = require('path');\\n\\n/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  content: [\\n    join(\\n      __dirname,\\n      '{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'\\n    ),\\n    ...createGlobPatternsForDependencies(__dirname),\\n  ],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [require('daisyui')],\\n};\\n"
  }
}"
`;
